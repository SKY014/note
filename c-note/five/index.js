/! 数组 !/
// # 为什么使用数组
// 构造数据类型 数组
// 数组是一组批量数据的有序集合 
// 数组中个数据的排列是有序号的 序号从0开始
// 用一个数组名和下标确定数组中的元素
// 数组中每一个元素都属于同一个数据类型
// 数组 构造数据类型

// #一维数组
// 定义 初始化 引用
// 一维数组 数列 二维数组 矩阵
// 一维数组的定义 
// 元素类型名指定该数组各元素的类型
// 数组名的表示方法同变量名 应符合标识符命名规则
// 用方括号括起来的常量表达式的值表示该数据含数组元素的个数 即数组长度
// 常量表达式中可包含常量和符号变量 不允许是变量
// 存储方式 一维数组个元素按下标顺序连续的分配在内存单元之中

// #排序算法
// 按照某种指定的顺序排列数据
// 分为降序和升序
// 选择排序
// 算法思想 固定位置 找数据
// 缺点 元素交换频繁 减少交换次数 交换一步到位
// 冒泡排序 
// 算法思想 小数上冒 大数下沉

// # 数组和函数
// 对于数组类型 使用函数时需要考虑函数的返回值
// 数组和函数
// 函数的参数--数组元素
// 函数的参数--数组名
// 当函数参数是数组元素时 和简单变量做函数参数实质是一样的 单项值传递 形参变量的改变是不会影响实参变量
// 函数参数是数组名时 数组名作为参数 地址传递  共享空间 
// 简单变量作函数参数 形参改变不影响实参 因为是不同的2份存储空间 完成的是实参到形参的单向值传递 
// 处理数组数据时 用数组名作为函数参数 形参和实参数组共享一份数据空间 没有为形参数据另外开辟数据空间 只是模拟了一个双向传递的效果

// # 二维数组
// 用来处理矩阵型数据
// 二维数据定义
// float s[5][3];
// 元素类型 数组名 行长度 列长度
// 二维数组初始化
// 二维数组引用 
// 行下标和列下标均为整型值 可以是常量也可以是变量 
// 最小的下标都是0 最大下标分别等于数组定义的行数减一和列数减一
// 引用时行下标和列下标都不得越界 编译器对于是否越界不进行检查
// 二维数组是通过双重循环完成二维数组元素的遍历

// # 字符串数组
// 批量的字符存放于数组 称为字符数组 它的每个元素都是一个字符 字符数组分为一维数组和二维数组
// 这种字符数组的输入输出方式不够灵活 程序中规定要处理多少个字符 就必须输入多少个字符
// 更好的处理方式字符串数组
// 字符串 C语言规定 以 '\0'字符作为结束标记的字符序列
// 字符串数组初始化 用字符串常量对字符数组初始化
// 字符串结尾'\0'作用 1.系统可以整体处理字符串2.处理从头开始遇到'\0'字符结束3.字符数组中如果没有字符串结束符'\',不能当做字符串整体处理 ，否则会报错
// 数组名本身就代表该数组的首地址 所以数组名前不允许再加地址符&
// 输入字符串时 系统自动加上'\0' 3.输入多个字符串 用空格隔开 输入时 遇空格或者回车结束
// 字符数组 字符串整体输入输出

// # 字符串处理函数
// 库函数之一 字符串处理函数
// 1.puts(字符串) 字符串整体输出函数
// 2.gets(字符串) 字符串整行输入函数
// 3.strcats(字符串1，字符串2) 字符串连接函数
// 4.strcpy(字符串数组1，字符串数组2) 字符串连接函数
// 5 strcmp 6. strlen 长度
// 这些库函数在使用时 务必要包含头文件string.h
