/**
 * @name es5
 * 书籍链接 http://crockford.com/javascript/
 * 
 * 
 * 
 * js是轻量级的脚本语言
 * 不具备开发操作系统的能力
 * js也是嵌入式语言 核心语法不多
 * js本身不提供任何 I/O 输入/输出 input/output 相关的api要考宿主环境提供
 * 所以js只适合嵌入更大型的应用程序环境，去调用宿主环境提供的底层api
 * 嵌入js的宿主环境有多种 最常见的环境就是浏览器
 * 另外还有服务器环境 也就是node项目
 * 
 * 从语法角度看 js语言是一种“对象模型”语言  各种宿主环境通过这个模型，描述自己的
 * 功能和操作接口 从而通过js控制这些功能
 * js不是纯粹的 面向对象语言 还支持其他编程范式 比如函数式编程
 * 这导致几乎任何一个问题 js都有多种解决方法 js高度灵活
 * 
 * js的核心语法相当精简 包括两个部分 基本的语法构造（比如操作符 控制结构 语句）
 * 和标准库（就是一系列具有各种功能的对象 比如 Array Date Math） 
 * 除此以外，各种宿主环境提供额外的api 即只能在改环境使用的接口
 * 以便js调用 
 * 以浏览器为例，它提供的额外api可以分成三大类
 * 1 浏览器控制类 操作浏览器
 * 2 DOM类 操作网页的各种元素
 * 3 Web类 实现互联网的各种功能
 * 
 * 如果宿主环境是服务器 如node 则会提供各种操作系统的api 比如文件操作api
 * 网络通信api 这些你都可以在node环境中找到
 * 
 * 本书主要介绍js核心语法和浏览器网页开发的基本知识 不涉及node
 * 只要分成四大部分
 * 1 基本语法
 * 2 标准库
 * 3 浏览器 api 
 * 4 dom
 * 
 * js有一些显著特点 值得学习 
 * 
 * js发明的目的 就是作为浏览器的内置脚本语言 为网页开发者提供操作浏览器
 * 的能力 所有浏览器都支持
 * 
 * js慢慢超越了浏览器 正在向通用的系统语言发展
 * 
 * 1 h5的出现 浏览器的功能越来越强 平台化
 * 
 * 2 node
 * 
 * 3 数据库操作
 * 
 * 4 移动平台开发
 * react native 项目则是将js写的组件编译成原生 从而使他们具有优秀的性能
 * 
 * 5 内嵌脚本语言
 * 
 * 6 跨平台的桌面应用程序
 * 
 * 7 
 * 
 * 
 * 易学性
 * 学习环境无处不在
 * 简单性
 * 与主流语言相似性
 * 
 * 
 * 
 * */ 


/**
 * @name 历史
 * 
 * 万维网 只能在操作系统的终端浏览
 * mosaic 第一个浏览器
 * 
 * 基本语法 借鉴c语言和java
 * 数据结构 借鉴java 将值分为原始值和对象两大类
 * 函数用法 引入闭包
 * 原型继承
 * 正则表达
 * 字符串和数组处理 
 * 
 * 从一开始就注定 js的编程风格是函数式编程和面向对象编程的一种混合体
 * 
 * 网页应用时候状态机
 * 
 * 
 * 
 * */ 


/**
 * @name 基本语法
 * 
 * 1 语句 js程序执行单位为行
 * 
 * 语句 是为了完成某种任务而进行的操作 赋值语句
 * 
 * 表达式 得到返回值的计算式 
 * 
 * 赋值语句的等号右边 预期是一个值 可以放置各种表达式 函数表达式
 * 
 * 2 变量 
 * js 变量名区分大小写 
 * 
 * 2.2变量提升
 * js的工作方式是 先解析代码 获取所有被声明的变量 ，然后再一行一行的运行
 * 这造成的结果 就是所有的变量的声明语句 都会被提升到代码头部
 * 这就叫做变量提升
 * 
 *  标识符 js的一些保留字 不能做标识符
 * 
 * 区块 
 * js使用大括号 将多个相关的语句结合在一起 称为区块block
 * 
 * 对于var js不构成单独作用域
 * 
 * 区块往往用来构成其他更复杂的语法结构 
 * 
 * 
 * 
 * */ 